{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-boxcomponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChannge","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFTC,EAAW,SAACR,GACxB,OACG,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OAErB,aADA,CACA,SAAOZ,UAAU,SAASa,KAAK,SAASC,SAAUF,EAAeD,YAAaA,MCuCnEI,G,wDArCb,aAAe,IAAD,8BACZ,gBAcDC,aAAe,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAO/C,WACEC,QAAQC,IAAI,mBACZ,MAAgCC,KAAKR,MAA9Bd,EAAP,EAAOA,SAAUW,EAAjB,EAAiBA,YACXY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYgB,wBAClD,OACE,sBAAKnC,UAAU,MAAf,UACA,2CACE,cAAC,EAAD,CACEW,YAAY,iBACZC,cAAekB,KAAKd,eAEtB,cAAC,EAAD,CAAUR,SAAUuB,W,GAhCVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd0b220b.chunk.js","sourcesContent":["import './card.styles.css'\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n    <img alt=\"Monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n    </div>\n)","// import react from \"react\";\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n return (\n    <div className=\"card-list\">\n    {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster}/>\n      ))}\n    </div>   \n )\n}","import './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChannge}) => (\n    // <input className=\"search\" type=\"search\" onChange={e => this.setState({ searchField: e.target.value})} placeholder={placeholder}/>\n    <input className=\"search\" type=\"search\" onChange={handleChannge} placeholder={placeholder}/>\n)\n    \n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-boxcomponent'\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n   handleChange = (e) => {\n    this.setState({ searchField: e.target.value})\n  }\n\n  render() {\n    console.log(\"igual hace esto\");\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1>Monstruos</h1>\n        <SearchBox\n          placeholder='search monster'\n          handleChannge={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}